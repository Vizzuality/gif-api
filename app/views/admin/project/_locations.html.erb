<label class="label">Locations</label>
<div id="locations" class="locations"></div>
<p class="inline-hints">Use the map below to search a place or drag the marker to get a specific location.</p>

<div class="map-container">
  <input type="hidden" id="hiddenLocations" name="project[location_coordinates]" value="<%= coordinates %>"/>
  <div class="input-container">
    <p id="preview">
      Lat: <span id="lat">0.000000</span> /
      Lng: <span id="lng">0.000000</span>
    </p>
    <p onclick="addLocation()" class="btn">Add</p>
  </div>
  <div class="search-control">
    <input type="text" id="searchInput"  class="controls" placeholder="Search by address"/>
  </div>
  <div id="map" class="map"></div>
</div>

<script type="text/javascript">
  var locations = {};

  // Set current locations when in edit
  var hiddenLocations = JSON.parse(document.getElementById('hiddenLocations').value);
  for (var j = 0; j < hiddenLocations.length; j++) {
    var itId = Math.random();
    locations[itId] = hiddenLocations[j];
    setLocationHtml(itId, hiddenLocations[j].lat, hiddenLocations[j].ltd);
  }

  // Initializing search box
  var input = document.getElementById('searchInput');
  var lat = document.getElementById('lat');
  var lng = document.getElementById('lng');
  var searchBox, map, marker, service;

  function initAutocomplete() {
    map = new google.maps.Map(document.getElementById('map'),{
      center:{
      lat: 12.9715987,
      lng: 77.59456269999998
      },
      zoom: 12
    });

    marker = new google.maps.Marker({
      position: {
        lat: 12.9715987,
        lng: 77.59456269999998
      },
      map: map,
      draggable:true
    });

    lat.innerText = 12.9715987;
    lng.innerText = 77.59456269999998;
    searchBox = new google.maps.places.SearchBox(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
      searchBox.setBounds(map.getBounds());
    });

    searchBox.addListener('places_changed' , function() {
      var places = searchBox.getPlaces();
      if (places.length == 0) return;

      var bounds =  new google.maps.LatLngBounds();
      var i, place;

      for( i = 0; i < places.length; i++) {
        bounds.extend(places[i].geometry.location);
        marker.setPosition(places[i].geometry.location);
      }
      map.fitBounds(bounds);
      map.setZoom(12);

      var center = map.getCenter();
      lat.innerText = center.lat();
      lng.innerText = center.lng();
    });

    google.maps.event.addListener(map , 'drag' , function() {
      var center = map.getCenter();
      lat.innerText = center.lat();
      lng.innerText = center.lng();
      marker.setPosition(center);
    });

    google.maps.event.addListener(marker , 'click' , function() {
      addLocation();
    });

    google.maps.event.addListener(marker , 'drag' , function() {
      var position = marker.getPosition();
      lat.innerText = position.lat();
      lng.innerText = position.lng();
    });
  }

  // Set location
  function setLocationHtml(id, lat, lng) {
    var location = '<span id="' + id +  '" class="loc-item">' + lat + ', ' + lng + '<span class="remove" onclick="onRemove(this)">x</span></span>';
    appendHtml(document.getElementById('locations'), location);
  }

  function addLocation() {
    var lParams = marker.getPosition();
    var id = Math.random();

    setLocationHtml(id, lParams.lat(), lParams.lng());
    locations[id] = { lat: lParams.lat(), ltd: lParams.lng() };
    setLocationsValues();
  }

  function onRemove(el) {
    var locIdRm = el.parentElement.id;
    var parent = document.getElementById("locations");
    var child = document.getElementById(locIdRm);
    var newLocations = {};

    parent.removeChild(child);
    for (var k in locations) {
      if (k !== locIdRm) {
        newLocations[k] = locations[k];
      }
    }
    locations = newLocations;
    setLocationsValues();
  }

  function setLocationsValues() {
    var arrLocations = [];
    var hidden = document.getElementById('hiddenLocations');

    for (var k in locations) {
      arrLocations.push(locations[k]);
    }
    hidden.value = JSON.stringify(arrLocations);
  }

  function appendHtml(el, str) {
    var div = document.createElement('span');

    div.innerHTML = str;
    while (div.children.length > 0) {
      el.appendChild(div.children[0]);
    }
  }
</script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAyesbQMyKVVbBgKVi2g6VX7mop2z96jBo&libraries=places&callback=initAutocomplete"></script>
